priority -50

global !p

texMathZones = ['texMathZone'+x for x in
    ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

import re
def math():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    currentlinenumber = int(vim.eval("line('.')"))
    currentcolnumber = int(vim.eval("col('.')"))
    if (vim.eval('&filetype') in {'vimwiki', 'markdown', 'vimwiki.markdown', 'vimwiki.markdown.pandoc', 'markdown.vimwiki'}): 
        if '$' in vim.eval("getline(%d)"%currentlinenumber)[:currentcolnumber] and "$" in vim.eval("getline(%d)"%currentlinenumber)[currentcolnumber-1:]:
            return True
        else:
            pre_mark, post_mark = 0, 0
            for i in range(1, 8):
                if "$$" in vim.eval("getline({})".format(max(currentlinenumber-i, 0)))[:2]:
                    pre_mark = 1
                if "$$" in vim.eval("getline({})".format(currentlinenumber+i))[:2]:
                    post_mark = 1
                if pre_mark and post_mark:
                    return True
            return False
    try:
        first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
        return first != ignore
    except StopIteration:
        return False


def generate_matrix(prefix, snip):
    info = snip.buffer[snip.line]
    spacelen = len(info) - len(info.lstrip())
    linfo = info[:snip.snippet_start[1]]
    rinfo = info[snip.snippet_end[1]:]
    info = info[snip.snippet_start[1]:snip.snippet_end[1]]
    # print([linfo, rinfo, info])
    if len(info) > 1 and info[1].isnumeric():
        real_shape = info[:2]
        virtual_shape = info[2:]
    else:
        real_shape = info[0]
        virtual_shape = info[1:]
    if len(real_shape) == 1:
        row_amount = int(real_shape)
        column_amount = int(real_shape)
    else:
        row_amount = int(real_shape[0])
        column_amount = int(real_shape[1])
    if len(virtual_shape) == 0:
        virtual_row_amount = "0"
        virtual_column_amount = "0"
    elif len(virtual_shape) == 1:
        virtual_row_amount = virtual_shape[0]
        virtual_column_amount = virtual_shape[0]
    else:
        virtual_row_amount = virtual_shape[0]
        virtual_column_amount = virtual_shape[1]
    snip.buffer[snip.line] = ''
    displayed = re.sub(r"\\", r"\\\\", linfo) + "\\begin{%cmatrix}\n" % prefix
    def generate_code(i, j, row, column, virtual_row, virtual_column):
        if i == 1 and j == 1:
            return ""
        else:
            code = """`!p
from snippet_helpers import generate_matrix_element
snip.rv = generate_matrix_element(%d, %d, %d, %d, '%c', '%c', [%s], [%s])
`""" % (i, j, row, column, virtual_row, virtual_column, "''," + ",".join("t[%d]" % x for x in range(1, j+1)), "''," + ",".join("t[%d]" % (1 + column * (x-1)) for x in range(1, i+1)))
        return code
    if row_amount > 0 and column_amount > 0:
        displayed += " " * (4 + len(linfo)) + "$1\t" + ("& " if column_amount > 1 else "\\" * 4)
        index = 2
        for i in range(2, column_amount + 1):
            displayed += "${" + "{}".format(index) + ":" + generate_code(1, i, row_amount, column_amount, virtual_row_amount, virtual_column_amount) + "}\t" + ("& " if i < column_amount else "\\" * 4)
            index += 1
        displayed += "\n"
        for j in range(2, row_amount + 1):
            displayed += " " * (4 + len(linfo))
            for i in range(1, column_amount + 1):
                displayed += "${" + "{}".format(index) + ":" + generate_code(j, i, row_amount, column_amount, virtual_row_amount, virtual_column_amount) + "}\t" + ("& " if i < column_amount else "\\" * 4)
                index += 1
            displayed += "\n"
    displayed += " " * len(linfo) + "\\end{%cmatrix}$0" % prefix + (" " + re.sub(r"\\", r"\\\\", rinfo) if rinfo else "")
    snip.expand_anon(displayed)
endglobal
##############
# MATH STUFF #
##############
snippet eq "Equation" b
\begin{equation}
    $0
\end{equation}
endsnippet

snippet vec "vector" w
\\overrightarrow{${1}} ${0}
endsnippet

snippet eqnn "Equation without number" b
\begin{equation*}
    $0
\end{equation*}
endsnippet

snippet eqa "Equation array" b
\begin{eqnarray}
    $1 & $2 & $0
\end{eqnarray}
endsnippet

snippet eqann "Equation array without numbers" b
\begin{eqnarray*}
    $1 & $2 & $0
\end{eqnarray*}
endsnippet

#snippet bmat "bmat" w
#\begin{bmatrix} $1 \end{bmatrix} $0
#endsnippet

snippet bmat "bmat" wm
\begin{bmatrix}${1:`!p
# add &
regex = r"(?<=\w)[ \t]+(?=\w)"
subst = r"\t&\t"
snip.rv = re.sub(regex, subst, snip.v.text, 0, re.MULTILINE)
# add \t\\\n
snip.rv = ("\t\\\\\n"+snip.mkline()).join([x.strip() for x in snip.rv.split("\n") if x])
# one line or multiple lines
if snip.v.text.count('\n') > 1:
	snip.rv = '\n' + snip.mkline() + snip.rv + '\n' + snip.mkline()
else:
	snip.rv = " " + snip.rv + " "
`}\end{bmatrix} $0
endsnippet

post_jump "generate_matrix('p', snip)"
context "math()"
snippet "pmat\(([1-9]{1,2}[a-zA-Z]{0,2})\)" "pmat" irw
`!p
if not snip.c:
	snip.rv = match.group(1)
`
endsnippet

post_jump "generate_matrix('b', snip)"
context "math()"
snippet "bmat\(([1-9]{1,2}[a-zA-Z]{0,2})\)" "bmat" irw
`!p
if not snip.c:
	snip.rv = match.group(1)
`
endsnippet

context "math()"
snippet frac. "Fraction" wA
\frac{${1:${VISUAL:nom}}}{${2:denom}}
endsnippet

snippet frac "Fraction" w
\frac{${1:${VISUAL:nom}}}{${2:denom}}
endsnippet

snippet mat "Smart Matrix"
\begin{${1:p/b/v/V/B/small}matrix}
    $0
\end{$1matrix}
endsnippet


context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet lr( "left( right)" w
\left( ${1:${VISUAL}} \right)
endsnippet

snippet lr| "left| right|" w
\left| ${1:${VISUAL}} \right|
endsnippet

snippet lr{ "left\{ right\}" w
\left\\{ ${1:${VISUAL}} \right\\}
endsnippet

snippet lr[ "left[ right]" w
\left[ ${1:${VISUAL}} \right]
endsnippet

context "math()"
snippet ",([aAbBcCdDeEgGkKlLmMnNoOpPrRsStTxX])" "Greek alphabet" wrA
`!p
alphabet_map = {
    "a": "alpha",
    "A": "Alpha",
    "b": "beta",
    "B": "Beta",
    "c": "chi",
    "C": "Chi",
    "d": "delta",
    "D": "Delta",
    "e": "epsilon",
    "E": "Epsilon",
    "g": "gamma",
    "G": "Gamma",
    "k": "kappa",
    "K": "Kappa",
    "l": "lambda",
    "L": "Lambda",
    "m": "mu",
    "M": "Mu",
    "n": "nu",
    "N": "Nu",
    "o": "omega",
    "O": "Omega",
    "p": "phi",
    "P": "Phi",
    "r": "rho",
    "R": "Rho",
    "s": "sigma",
    "S": "Sigma",
    "t": "theta",
    "T": "Theta",
    "x": "xi",
    "X": "Xi",
}
snip.rv = "\\"+alphabet_map[match.group(1)]
`
endsnippet

snippet "([vco]?)dot(s?)\." "dot" wrA
`!p snip.rv = "\\"+match.group(1)+"dot"+match.group(2)`
endsnippet

snippet mi "math inline" w
$ ${1}$${0}
endsnippet

snippet mo "math another line" w
$$ ${1}$$${0}
endsnippet



